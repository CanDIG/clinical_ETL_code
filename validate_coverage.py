import argparse
import json
import jsonschema
import os
import re
from CSVConvert import load_manifest
from copy import deepcopy
from moh_mappings import mohschema



def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument('--manifest', type=str, help="Path to a manifest file describing the mapping.")
    parser.add_argument('--input', type=str, help="JSON file generated by CSVConvert.")
    args = parser.parse_args()
    return args


def main(args):
    map_json_file = args.input
    manifest = args.manifest

    # if manifest is provided, we should create a manifest scaffold
    if manifest is not None:
        manifest = load_manifest(manifest)
        identifier = manifest["identifier"]
        schema = manifest["schema"]
        indexed = manifest["indexed"]
        mapping = manifest["mapping"]
        if identifier is None:
            print("Need to specify what the main identifier column name is in the manifest file")
            return
    else:
        print("A manifest file is required, using the --manifest argument")
        return

    map_json = None
    if map_json_file is not None and os.path.isfile(map_json_file):
            with open(map_json_file) as fp:
                map_json = json.load(fp)
    else:
        print("A JSON file, generated by CSVConvert.py, is required, using the --input argument")
        return

    # read the schema (from the url specified in the manifest) and generate
        # a scaffold
    schema = mohschema(manifest["schema"])
    if schema is None:
        print(f"Did not find an openapi schema at {url}; please check link")
        return

    components = deepcopy(schema.schema)["DonorWithClinicalData"]
    components["$defs"] = schema.defs
    result = jsonschema.validate(map_json[0], components)
    print(result)
    return


if __name__ == '__main__':
    main(parse_args())
